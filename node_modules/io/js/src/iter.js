var Q, _checkArgTypes, _each, _eachSync, _reduce, _reduceSync, define, isKind, isType, ref;

Q = require("q");

define = require("define");

ref = require("type-utils"), isKind = ref.isKind, isType = ref.isType;

define(function() {
  var async, sync;
  this.options = {
    frozen: true
  };
  sync = {};
  this(sync, {
    each: function(obj, iterator) {
      var isArray;
      _checkArgTypes(obj, iterator);
      isArray = isKind(obj, Array);
      return _eachSync(obj, function(value, key) {
        return iterator(value, key);
      });
    },
    map: function(obj, iterator) {
      var isArray, result;
      _checkArgTypes(obj, iterator);
      isArray = isKind(obj, Array);
      result = isArray ? [] : {};
      return _reduceSync(obj, result, function(result, value, key) {
        value = iterator(value, key, obj);
        result[key] = value;
        return result;
      });
    },
    filter: function(obj, iterator) {
      var isArray, result;
      _checkArgTypes(obj, iterator);
      isArray = isKind(obj, Array);
      result = isArray ? [] : {};
      return _reduceSync(obj, result, function(result, value, key) {
        if (iterator(value, key, obj)) {
          if (isArray) {
            result.push(value);
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    },
    reduce: function(obj, result, iterator) {
      if (!arguments.hasOwnProperty(2)) {
        iterator = result;
        result = void 0;
      }
      _checkArgTypes(obj, iterator);
      return _reduceSync(obj, result, iterator);
    }
  });
  async = {};
  this(async, {
    each: function(obj, iterator) {
      _checkArgTypes(obj, iterator);
      return _each(obj, iterator);
    },
    map: function(obj, iterator) {
      var createdWith, isArray, result;
      _checkArgTypes(obj, iterator);
      createdWith = "io.async.map";
      isArray = isKind(obj, Array);
      result = isArray ? [] : {};
      return _reduce(obj, result, function(result, value, key) {
        value = iterator(value, key, obj);
        if (isArray) {
          result.push(value);
        } else {
          result[key] = value;
        }
        return result;
      })._createdBy(createdWith).then(function() {
        return result;
      })._createdWith(createdWith);
    },
    filter: function(obj, iterator) {
      var createdWith, isArray, result;
      _checkArgTypes(obj, iterator);
      createdWith = "io.async.filter";
      isArray = isKind(obj, Array);
      result = isArray ? [] : {};
      return _reduce(obj, result, function(result, value, key) {
        if (iterator(value, key, obj)) {
          if (isArray) {
            result.push(value);
          } else {
            result[key] = value;
          }
        }
        return result;
      })._createdBy(createdWith).then(function() {
        return result;
      })._createdWith(createdWith);
    },
    reduce: function(obj, result, iterator) {
      if (!arguments.hasOwnProperty(2)) {
        iterator = result;
        result = void 0;
      }
      _checkArgTypes(obj, iterator);
      return _reduce(obj, result, iterator);
    }
  });
  return this(exports, {
    sync: {
      value: sync
    },
    async: {
      value: async
    }
  });
});

_eachSync = function(obj, iterator) {
  var isArray, key, value;
  isArray = isKind(obj, Array);
  for (key in obj) {
    value = obj[key];
    if (isArray) {
      key = parseInt(key);
    }
    iterator(value, key, obj);
  }
};

_reduceSync = function(obj, result, iterator) {
  _eachSync(obj, function(value, key) {
    return result = iterator(result, value, key, obj);
  });
  return result;
};

_each = function(obj, iterator) {
  var createdWith, deferred, series;
  createdWith = "io.async.each";
  deferred = Q.defer();
  series = Q.fulfill()._createdBy(createdWith);
  _eachSync(obj, function(value, key) {
    var iterate;
    iterate = function() {
      if (typeof iterator !== "function") {
        throw TypeError("'iterator' must be a Function");
      }
      return iterator(value, key);
    };
    return series = series.then(iterate)._createdBy(createdWith);
  });
  series.then(deferred)._createdBy(createdWith);
  return deferred.promise._createdWith(createdWith);
};

_reduce = function(obj, result, iterator) {
  var createdWith;
  createdWith = "io.async.reduce";
  return _each(obj, function(value, key) {
    var promise;
    promise = iterator(result, value, key, obj);
    return Q._resolve(promise, createdWith).then(function(newValue) {
      return result = newValue;
    })._createdBy(createdWith);
  })._createdBy(createdWith).then(function() {
    return result;
  })._createdWith("io.async.reduce");
};

_checkArgTypes = function(obj, iterator) {
  if ((obj == null) || (!isKind(obj, Object) && (obj.__proto__ != null))) {
    throw TypeError("'obj' must inherit from Object");
  }
  if (!isKind(iterator, Function)) {
    throw TypeError("'iterator' must inherit from Function");
  }
};

//# sourceMappingURL=../../map/src/iter.map
