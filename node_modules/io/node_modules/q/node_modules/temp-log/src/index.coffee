
capitalize = require "capitalize"
isNodeEnv = require "is-node-env"
parseBool = require "parse-bool"
process = require "process"
os = require "os"

# The current implementation for 'temp-log'.
_ = null

log = module.exports = ->
  log._.log.apply null, arguments

log.log = log

#
# Properties
#

[
  "ln"
  "isVerbose"
  "isDebug"
]

.forEach (key) ->
  Object.defineProperty log, key,
    enumerable: yes
    get: -> log._[key]

#
# Methods
#

[
  "verbose"
  "debug"
  "warn"
  "error"
  "moat"
  "it"
  "format"
]

.forEach (key) ->
  Object.defineProperty log, key,
    enumerable: yes
    value: -> log._[key].apply log._, arguments

# The default implementation for 'temp-log'.
_ = temp =

  log: (messages...) ->
    for message in messages
      if message instanceof Array
        temp.log.apply null, message
      else if typeof message is "string"
        if isNodeEnv then process.stdout.write message
        else console.log message
      else if message instanceof Error
        temp.log message.stack, log.ln
        process.exit 0 if isNodeEnv
      else
        type = if message? then message.constructor.name else "Void"
        throw Error "Invalid message type: #{type}"
    yes

  ln: os.EOL

  isVerbose: isNodeEnv and parseBool(process.env.VERBOSE) is yes

  isDebug: isNodeEnv and parseBool(process.env.DEBUG) is yes

  verbose: (messages...) ->
    @log.apply null, messages if @isVerbose

  debug: (messages...) ->
    @log.apply null, messages if @isDebug

  warn: (message) ->
    @log "WARNING: " + message

  error: (error) ->
    @log error.message

  moat: (width) ->
    return no if width <= 0
    @log @ln for i in [0...width]
    yes

  it: (message) ->
    @moat 0
    @log message
    @moat 0

  format: (value, label = "") ->
    @log label + JSON.stringify value

#
# Colored text support
#

_styler = (messages...) ->
  temp.log.apply null, messages

_defineColor = (color) ->

  Object.defineProperty _styler, color,
    enumerable: yes
    get: -> this

  Object.defineProperty temp, color,
    enumerable: yes
    get: -> _styler

  Object.defineProperty log, color,
    enumerable: yes
    get: -> log._[color]

[
  "red"
  "blue"
  "green"
  "cyan"
  "white"
  "gray"
  "yellow"
  "pink"
  "black"
]

.forEach (color) ->
  _defineColor color
  _defineColor "bg" + capitalize color

[
  "dim"
  "bold"
]

.forEach (style) ->
  _defineColor style

#
# Expose the internal implementation for replacement.
#

Object.defineProperty log, "_",
  get: -> _
  set: (newValue) -> _ = newValue
