{
  "name": "stack",
  "version": "1.0.0",
  "main": "js/src/index.js",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aleclarson/stack.git"
  },
  "engines": {
    "node": "*"
  },
  "license": "MIT",
  "dependencies": {
    "combine": "github:aleclarson/combine#1.0.0",
    "define": "github:aleclarson/define#1.0.0",
    "is-node-env": "github:aleclarson/is-node-env#1.0.0",
    "lotus-require": "github:aleclarson/lotus-require#1.0.0",
    "minimatch": "^2.0.8",
    "named-function": "github:aleclarson/named-function#1.0.3",
    "node-paths": "github:aleclarson/node-paths#0.0.1",
    "node-source-map": "github:aleclarson/source-map",
    "temp-log": "github:aleclarson/temp-log#1.0.0",
    "weak-map": "github:aleclarson/weak-map#1.0.1"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-coffee": "github:aleclarson/grunt-contrib-coffee",
    "grunt-contrib-watch": "^0.6.1",
    "load-grunt-tasks": "^3.1.0"
  },
  "gitHead": "7f20b9c0a5c9dc2ef89fe390b557dc034b9ab92b",
  "readme": "\n# stack v1.0.0 [![frozen](http://badges.github.io/stability-badges/dist/frozen.svg)](http://github.com/badges/stability-badges)\n\nAccess `CallSite` stacks in Node.\n\nCompatible with [React Native](http://github.com/facebook/react-native) in that it returns `null` rather than crashing.\n\ninstall\n-------\n\n```sh\nnpm install --save aleclarson/stack#1.0.0\n```\n\nusage\n-----\n\nA stack \"constructor\" is exported.\n\n```CoffeeScript\nStack = require \"stack\"\n```\n\nRemember to `require \"coffee-script\"` (or any other library that sets `Error.prepareStackTrace`) **before** you `require \"stack\"`.\n\n-\n\nCall it with no arguments to create a Stack starting at the line it is on.\n\n```CoffeeScript\nstack = Stack()\n```\n\n-\n\n`Stack` will always return an `Array` containing `CallSite`s that represent a frame in the stack trace.\n\n```CoffeeScript\nstack.forEach (frame) ->\n  frame.getThis()\n  frame.getTypeName()\n  frame.getFunction()\n  frame.getFunctionName()\n  frame.getLineNumber()\n  frame.getColumnNumber()\n  frame.getEvalOrigin()\n  frame.isToplevel()\n  frame.isEval()\n  frame.isNative()\n  frame.isConstructor()\n```\n\nRead more about `CallSite`s [**here**](https://code.google.com/p/v8-wiki/wiki/JavaScriptStackTraceApi#Customizing_stack_traces).\n\n-\n\nPass an `Error` to `Stack` and receive an `Array` of `CallSite`s.\n\n```CoffeeScript\nstack = Stack TypeError()\n```\n\n-\n\nThere are other options available, too.\n\n```CoffeeScript\nStack\n  error: TypeError()       # default: new Error()\n  limit: 4                 # default: Infinity\n  skip: 2                  # default: 0\n```\n\nYou can edit **some** of the options' default values. Just modify `Stack.defaults`!\n\n-\n\nYou can also limit the printed stack trace without affecting the number of frames you can access.\n\n```CoffeeScript\nError.stackPrintLimit = 4\n```\n\n**IMPORTANT:** Be sure to not confuse this with `Error.stackTraceLimit` (which should never be touched).\n",
  "readmeFilename": "README.md",
  "description": "Access `CallSite` stacks in Node.",
  "bugs": {
    "url": "https://github.com/aleclarson/stack/issues"
  },
  "homepage": "https://github.com/aleclarson/stack#readme",
  "_id": "stack@1.0.0",
  "_shasum": "e7c79ed6d159ef30eb3842bab44a9861e70d5b99",
  "_from": "aleclarson/stack#1.0.0",
  "_resolved": "git://github.com/aleclarson/stack.git#7f20b9c0a5c9dc2ef89fe390b557dc034b9ab92b"
}
