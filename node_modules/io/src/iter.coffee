
Q = require "q"
define = require "define"
{ isKind, isType } = require "type-utils"

define ->

  @options =
    frozen: yes

  sync = {}

  @ sync,

    each: (obj, iterator) ->

      _checkArgTypes obj, iterator

      isArray = isKind obj, Array

      _eachSync obj, (value, key) ->

        iterator value, key

    map: (obj, iterator) ->

      _checkArgTypes obj, iterator

      isArray = isKind obj, Array

      result = if isArray then [] else {}

      _reduceSync obj, result, (result, value, key) ->

        value = iterator value, key, obj

        result[key] = value

        result

    filter: (obj, iterator) ->

      _checkArgTypes obj, iterator

      isArray = isKind obj, Array

      result = if isArray then [] else {}

      _reduceSync obj, result, (result, value, key) ->

        if iterator value, key, obj

          if isArray then result.push value

          else result[key] = value

        result

    reduce: (obj, result, iterator) ->

      if !arguments.hasOwnProperty 2
        iterator = result
        result = undefined

      _checkArgTypes obj, iterator

      _reduceSync obj, result, iterator

  async = {}

  @ async,

    each: (obj, iterator) ->

      _checkArgTypes obj, iterator

      _each obj, iterator

    map: (obj, iterator) ->

      _checkArgTypes obj, iterator

      createdWith = "io.async.map"

      isArray = isKind obj, Array

      result = if isArray then [] else {}

      _reduce obj, result, (result, value, key) ->

        value = iterator value, key, obj

        if isArray then result.push value

        else result[key] = value

        result

      ._createdBy createdWith

      .then -> result

      ._createdWith createdWith

    filter: (obj, iterator) ->

      _checkArgTypes obj, iterator

      createdWith = "io.async.filter"

      isArray = isKind obj, Array

      result = if isArray then [] else {}

      _reduce obj, result, (result, value, key) ->

        if iterator value, key, obj

          if isArray then result.push value

          else result[key] = value

        result

      ._createdBy createdWith

      .then -> result

      ._createdWith createdWith

    reduce: (obj, result, iterator) ->

      if !arguments.hasOwnProperty 2
        iterator = result
        result = undefined

      _checkArgTypes obj, iterator

      _reduce obj, result, iterator

  @ exports,

    sync:
      value: sync

    async:
      value: async

#
# Helpers
#


_eachSync = (obj, iterator) ->

  isArray = isKind obj, Array

  for key, value of obj

    key = parseInt key if isArray

    iterator value, key, obj

  return

_reduceSync = (obj, result, iterator) ->

  _eachSync obj, (value, key) ->

    result = iterator result, value, key, obj

  result

_each = (obj, iterator) ->

  createdWith = "io.async.each"

  deferred = Q.defer()

  series = Q.fulfill()

  ._createdBy createdWith

  _eachSync obj, (value, key) ->

    iterate = ->
      throw TypeError "'iterator' must be a Function" if typeof iterator isnt "function"
      iterator value, key

    series = series.then iterate

    ._createdBy createdWith

  series.then deferred

  ._createdBy createdWith

  deferred.promise

  ._createdWith createdWith

_reduce = (obj, result, iterator) ->

  createdWith = "io.async.reduce"

  _each obj, (value, key) ->

    promise = iterator result, value, key, obj

    Q._resolve promise, createdWith

    .then (newValue) -> result = newValue

    ._createdBy createdWith

  ._createdBy createdWith

  .then -> result

  ._createdWith "io.async.reduce"

_checkArgTypes = (obj, iterator) ->

  if !obj? or (!isKind(obj, Object) and obj.__proto__?)
    throw TypeError "'obj' must inherit from Object"

  if !isKind iterator, Function
    throw TypeError "'iterator' must inherit from Function"
