
require "lotus-require"

{ isType, isKind } = require "type-utils"
define = require "define"
q = require "q"

addons = [
  require "./fs"
  require "./iter"
]

define ->

  @options =
    frozen: yes

  @ exports,
    sync: {}
    async: {}

  for addon in addons
    for key in ["sync", "async"]
      continue if addon is null
      @ exports[key], addon[key]

  @ exports.async,

    try: q.try

    when: q.when

    all: q.all

    promise: q.promise

    promised: (func) -> ->
      self = this
      args = arguments
      q.try -> func.apply self, args

    loop: (timeout, looper) ->

      unless arguments.hasOwnProperty 1
        looper = timeout
        timeout = null

      deferred = q.defer()

      loops = 0
      isDone = no
      result = undefined

      done = ->
        isDone = yes
        result = arguments[0]

      tick = ->

        try tickPromise = q looper done, loops++

        catch error
          return deferred.reject error

        tickPromise.always ->
          if isDone
            deferred.resolve result
          else
            tick()

      q.nextTick tick

      if typeof timeout is "number"
        return q.timeout deferred.promise, timeout

      deferred.promise

    throw: (error, info) ->

      unless isKind error, Error
        if arguments.hasOwnProperty 1
          error = Error()
        else
          info = error
          error = info.error or Error()

      info = {} unless isType info, Object

      error.fatal = if isType info.fatal, Boolean then info.fatal else yes

      error.code = info.code if isType info.code, String

      error.format = info.format if isKind(info.format, Function) or isType(info.format, Object)

      error[key] = value for key, value of info when not error.hasOwnProperty key

      throw error

    catch: (error, caught) ->

      return no if error.fatal is no

      throw error unless isKind caught, Function

      caught error

    delay: q.delay

    timeout: q.timeout

    nextTick: q.nextTick

    resolve: q.resolve

    fulfill: q.fulfill

    reject: q.reject

    defer: q.defer

    Promise: q.makePromise
