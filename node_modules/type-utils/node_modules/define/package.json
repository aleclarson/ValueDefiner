{
  "name": "define",
  "description": "An alternate style for defining properties with custom behavior.",
  "version": "1.0.0",
  "main": "js/src/index.js",
  "dependencies": {
    "computed-var": "github:aleclarson/computed-var#1.0.0",
    "has": "^1.0.1",
    "in-array": "^0.1.0",
    "is-node-env": "github:aleclarson/is-node-env#1.0.0",
    "lazy-var": "github:aleclarson/lazy-var#1.0.0",
    "lotus-require": "github:aleclarson/lotus-require#1.0.0",
    "named-function": "github:aleclarson/named-function#1.0.3",
    "reactive-var": "github:aleclarson/reactive-var#1.0.6"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aleclarson/define.git"
  },
  "licenses": [
    "MIT"
  ],
  "gitHead": "fdf7d9c1a7f6b002ffff7f7f6996d5c3dc71b88e",
  "readme": "\n# define v1.0.0 [![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\n`define` is `Object.defineProperty` but with **more utility** and **less typing**!\n\n&nbsp;\n\n```sh\nnpm install --save aleclarson/define#1.0.0\n```\n\n&nbsp;\n\nexample\n-------\n\n```CoffeeScript\nBuffer = module.exports = (options) ->\n\ndefine = require \"define\"\n\ndefine Buffer, ->\n\n  @options =\n    configurable: no\n    writable: no\n\n  @ \n    length:\n      get: -> @_length\n\n    _length:\n      value: 0\n      enumerable: no\n      writable: yes\n\n  @ Buffer.prototype, -> @ \n\n    isEncoding: (encoding) ->\n\n    slice: (start, end) ->\n```\n\n&nbsp;\n\noptions\n-------\n\nThese are the options available when defining a property with `define(key, options)`.\n\n#### value\n\nA cache for the current value of the property.\n\n#### get\n\nCalled when the property's value is accessed via `obj.prop`.\n\n#### lazy\n\nJust like `options.get`, but the return value is stored after the first call.\n\n#### cache\n\nAn `Object` to store the property's value in. This is useful for having a property that you can set with access to said `Object`, but can only get from the outside.\n\n#### set\n\nCalled when the property's value is set via `obj.prop = newValue`.\n\nIf defined, you must set `options.value` manually via `define.value = newValue` inside `options.set`.\n\n#### willSet\n\nCalled before `options.set` is called.\n\nThe value you return is passed to `options.set` as the first argument.\n\n#### didSet\n\nCalled after `options.set` is called.\n\nThis is useful when you want to use `options.value` and still react to when it is set. In contrast, defining `options.set` will stop `options.value` from being used.\n\n#### writable\n\nCan the property's value be changed?\n\nAn error will be thrown if you try to set a property that is not writable.\n\n#### enumerable\n\nCan the property be seen with `Object.keys()` or loops?\n\n#### configurable\n\nCan the property be redefined with `define()` or `Object.defineProperty()`?\n\nAn error will be thrown if you try to delete or redefine a property that is not configurable.\n\n&nbsp;\n\ntips & tricks\n-------------\n\n\\+ If you define a `Function` with a capitalized key (like `FooBar`), it is automatically wrapped by a `NamedFunction`.\n\n&nbsp;\n\ntesting\n-------\n\nTo run the tests:\n\n```sh\n# In any directory:\nnpm install -g jasmine-node\n\n# In this repo's directory:\nnpm test\n```\n\n&nbsp;\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/aleclarson/define/issues"
  },
  "homepage": "https://github.com/aleclarson/define#readme",
  "_id": "define@1.0.0",
  "_shasum": "121424df5e450add1a74c87ae108345aa127522f",
  "_from": "aleclarson/define#1.0.0",
  "_resolved": "git://github.com/aleclarson/define.git#fdf7d9c1a7f6b002ffff7f7f6996d5c3dc71b88e"
}
