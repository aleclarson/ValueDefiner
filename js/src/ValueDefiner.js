// Generated by CoffeeScript 1.10.0
(function() {
  var NamedFunction, ValueCreator, ValueDefiner, Void, assertKind, assertReturnType, assertType, combine, define, emptyFunction, isKind, isType, ref, setKind, setType, sync, throwFailure, validateTypes;

  ref = require("type-utils"), Void = ref.Void, isType = ref.isType, isKind = ref.isKind, setType = ref.setType, setKind = ref.setKind, assertType = ref.assertType, assertKind = ref.assertKind, validateTypes = ref.validateTypes, assertReturnType = ref.assertReturnType;

  throwFailure = require("failure").throwFailure;

  sync = require("io").sync;

  NamedFunction = require("named-function");

  emptyFunction = require("emptyFunction");

  combine = require("combine");

  define = require("define");

  ValueCreator = require("./ValueCreator");

  module.exports = ValueDefiner = NamedFunction("ValueDefiner", function(classConfig, options) {
    var defineValues, definer, didDefineValues, initValueCreator, key, valueCreator, valueCreatorTypes, valueCreators;
    assertType(classConfig, Object);
    validateTypes(options, {
      valueCreatorTypes: Object,
      defineValues: [Function, Void],
      didDefineValues: [Function, Void]
    });
    valueCreatorTypes = options.valueCreatorTypes, defineValues = options.defineValues, didDefineValues = options.didDefineValues;
    valueCreators = {};
    for (key in valueCreatorTypes) {
      initValueCreator = valueCreatorTypes[key];
      assertKind(initValueCreator, Function);
      valueCreator = initValueCreator(classConfig, key);
      if (isKind(valueCreator, Function)) {
        valueCreators[key] = valueCreator;
      }
    }
    if (defineValues == null) {
      defineValues = function(valueConfigs) {
        return define(this, valueConfigs);
      };
    }
    definer = function(instance, args) {
      var config, createValues, definedValues, error, valueConfigs;
      if (didDefineValues != null) {
        definedValues = {};
      }
      for (key in valueCreators) {
        createValues = valueCreators[key];
        try {
          valueConfigs = createValues(instance, args);
          if (valueConfigs != null) {
            assertType(valueConfigs, Object);
            if (didDefineValues != null) {
              for (key in valueConfigs) {
                config = valueConfigs[key];
                definedValues[key] = combine({}, config);
              }
            }
            defineValues.call(instance, valueConfigs, key, valueCreatorTypes[key]);
          }
        } catch (error1) {
          error = error1;
          throwFailure(error, {
            key: key
          });
        }
      }
      if (didDefineValues != null) {
        didDefineValues.call(instance, definedValues);
      }
      return instance;
    };
    return setType(definer, ValueDefiner);
  });

  setKind(ValueDefiner, Function);

}).call(this);
